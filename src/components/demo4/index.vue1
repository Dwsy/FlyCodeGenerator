<template>
  <div v-if="goToSymbolResults">
    <Teleport to=".tree-container">
      <div class="fly-outline">
        <div class="outline1"><span class="outline2">业务实体</span></div>

        <!-- <NText style="margin-left: 1%" class="title">大纲</NText> -->
        <n-input v-model:value="pattern" placeholder="搜索" />
        <div class="fly-outline-tree">
          <NForm>
            <n-tree
              block-line
              :data="treeData"
              :pattern="pattern"
              :show-irrelevant-nodes="showIrrelevantNodes"
              :node-props="nodeProps"
            />
          </NForm>
        </div>
      </div>
    </Teleport>
  </div>
</template>

<script setup lang="ts">
import { TreeOption, useMessage } from 'naive-ui'
import { monacoInitializedUtil } from '../../util/monacoUtil'
import { SymbolKindCodiconMap, getAllSqlRangeSFWFn, getMonacoJavaScriptMonarch, provideDocumentSymbol } from './App'
import { querySelectorPromise } from '../demo6'
import { getAllSqlRangeFn } from '../MonacoEnhance/sqlProvider'
const showIrrelevantNodes = ref(false)
const treeData = ref<TreeOption[]>()
const pattern = ref('')
const defaultExpandedKeys = ref([])
const goToSymbolResults = ref(false)
const r = ref(false)
const message = useMessage()
const IEditor = ref<monaco.editor.IEditor>(null)
const nodeProps = ({ option }: { option: TreeOption }) => {
  return {
    onClick() {
      //@ts-ignore
      // message.info('[Click] ' + option.this.name)
      // debugger

      //@ts-ignore
      const position = new monaco.Position(option.this.range.startLineNumber, option.this.range.startColumn)
      // IEditor.value.setPosition(position)
      //@ts-ignore
      noweditor.focus()
      //@ts-ignore

      noweditor.setPosition(position)
      //@ts-ignore

      const revealPosition = new monaco.Position(option.this.range.startLineNumber, option.this.range.startColumn)
      //@ts-ignore

      noweditor.revealPositionInCenterIfOutsideViewport(revealPosition)
    }
    // onContextmenu (e: MouseEvent): void {
    //   optionsRef.value = [option]
    //   showDropdownRef.value = true
    //   xRef.value = e.clientX
    //   yRef.value = e.clientY
    //   console.log(e.clientX, e.clientY)
    //   e.preventDefault()
    // }
  }
}
onUnmounted(() => {
  console.log('onUnmounted goToSymbolResults')

  if (goToSymbolResults.value) {
    // goToSymbolResults.value.remove()
  }
})
onMounted(() => {
  console.log('goToSymbolResults onMounted')
  monacoInitializedUtil.onInitialized(() => {
    const monacoJavaScriptMonarch = getMonacoJavaScriptMonarch()
    const PropertyRegexPre = /\w+(?=\.)/
    monacoJavaScriptMonarch.tokenizer.root.unshift([/\/\/\s*TODO\b/i, 'comment.fixme'])
    monacoJavaScriptMonarch.tokenizer.root.unshift([/\/\/\s*FIXME\b/i, 'comment.fixme'])
    monacoJavaScriptMonarch.tokenizer.root.unshift([/\/\/\s*NOTE\b/i, 'comment.fixme'])
    monacoJavaScriptMonarch.tokenizer.root.unshift([/\/\/\s*todo\b/i, 'comment.todo'])
    monacoJavaScriptMonarch.tokenizer.root.unshift([/\/\/\s*fixme\b/i, 'comment.fixme'])
    monacoJavaScriptMonarch.tokenizer.root.unshift([/\/\/\s*remind\b/i, 'comment.remind'])
    // monacoJavaScriptMonarch.tokenizer.root.unshift([PropertyRegex, 'code.property'])
    // [, 'attribute'],
    monacoJavaScriptMonarch.tokenizer.root.unshift([/\.[a-zA-Z_]\w*/, 'code.property'])
    monacoJavaScriptMonarch.tokenizer.root.unshift([PropertyRegexPre, 'code.propertypre'])
    monacoJavaScriptMonarch.tokenizer.root.unshift([/FLY\.log/, 'flylog'])
    monacoJavaScriptMonarch.tokenizer.root.unshift([/\b(\w+)\(/, 'function'])
    monaco.languages.setMonarchTokensProvider('javascript', monacoJavaScriptMonarch)
    monaco.languages.typescript.javascriptDefaults.setDiagnosticsOptions({
      noSuggestionDiagnostics: true,
      noSemanticValidation: true,
      noSyntaxValidation: true,
      onlyVisible: true
    })
    const _ = new provideDocumentSymbol()
    monaco.editor.onDidCreateEditor((e) => {
      setTimeout(() => {
        querySelectorPromise('.tree-container', 5000, 500).then((e) => {
          console.log('goToSymbolResults', e)
          //@ts-ignore
          goToSymbolResults.value = e
        })
      }, 1000)
      debugger
      // if (!e.getDomNode()?.getAttribute('role')) {
      //   return
      // }
      IEditor.value = e
      const provideDocumentSymbols = async (model, token) => {
        let symbols: any[] = await _.provideDocumentSymbols(model, token)
        const allSqlRange = getAllSqlRangeSFWFn(model)
        symbols = symbols.concat(allSqlRange)
        console.log(symbols)
        symbols.sort((a, b) => {
          return a.range.startLineNumber - b.range.startLineNumber
        })
        const TreeOptionArray = convertSymbolArrayToTreeOptionArray(symbols)
        // console.log(TreeOptionArray)
        treeData.value = TreeOptionArray
        return symbols
      }
      setTimeout(async () => {
        provideDocumentSymbols(e.getModel(), null)
      }, 1400)
      monaco.languages.registerDocumentSymbolProvider('javascript', {
        provideDocumentSymbols
      })
    })
    // monacoJavaScriptMonarch.tokenizer.root.unshift([/[a-zA-Z_]\w*\(/, 'function']);
    // monacoJavaScriptMonarch.tokenizer.root.unshift([/\b([a-zA-Z_]\w*)(?=\()/, 'function']);
  })
})

function convertSymbolToTreeOption(documentSymbol: monaco.languages.DocumentSymbol): TreeOption {
  const SymbolKindKeys = Object.keys(monaco.languages.SymbolKind)
  debugger
  return {
    key: documentSymbol.name + documentSymbol.range.startLineNumber + documentSymbol.range.startColumn,
    label: documentSymbol.name,
    disabled: false,
    this: documentSymbol,
    children: documentSymbol.children?.map(convertSymbolToTreeOption),
    prefix: () =>
      h('span', {
        class: 'codicon ' + `codicon-symbol-${monaco.languages.SymbolKind[documentSymbol.kind].toLocaleLowerCase()}`
      })
    // suffix: () => documentSymbol.detail
  }
}
function convertSymbolArrayToTreeOptionArray(documentSymbols: monaco.languages.DocumentSymbol[]): TreeOption[] {
  return documentSymbols.map(convertSymbolToTreeOption)
}
</script>
<style>
#beSetting > div.left-side > div > div.tree-container > ul {
  height: 50% !important;
  overflow-y: auto;
}
.fly-outline {
  height: 100%;
  /* max-height: 50% !important; */
}
.fly-outline-tree {
  max-height: 50% !important;
  overflow-y: auto;
}
.object-tree-container .tree-container {
  height: 100%;
  overflow: hidden;
}

.outline1 {
  box-sizing: border-box;
  padding-left: 12px;
  font-weight: 500;
  line-height: 38px;
  margin: 0px 4px;
  border-bottom: 1px solid #3f4042;
  color: #969799;
}

.outline2 {
  box-sizing: border-box;
}

.monaco-editor .codicon.codicon-symbol-array,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-array {
  color: var(--vscode-symbolIcon-arrayForeground);
}

.monaco-editor .codicon.codicon-symbol-boolean,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-boolean {
  color: var(--vscode-symbolIcon-booleanForeground);
}

.monaco-editor .codicon.codicon-symbol-class,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-class {
  color: var(--vscode-symbolIcon-classForeground);
}

.monaco-editor .codicon.codicon-symbol-method,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-method {
  color: var(--vscode-symbolIcon-methodForeground);
}

.monaco-editor .codicon.codicon-symbol-color,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-color {
  color: var(--vscode-symbolIcon-colorForeground);
}

.monaco-editor .codicon.codicon-symbol-constant,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-constant {
  color: var(--vscode-symbolIcon-constantForeground);
}

.monaco-editor .codicon.codicon-symbol-constructor,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-constructor {
  color: var(--vscode-symbolIcon-constructorForeground);
}

.monaco-editor .codicon.codicon-symbol-enum,
.monaco-editor .codicon.codicon-symbol-value,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-enum,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-value {
  color: var(--vscode-symbolIcon-enumeratorForeground);
}

.monaco-editor .codicon.codicon-symbol-enum-member,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-enum-member {
  color: var(--vscode-symbolIcon-enumeratorMemberForeground);
}

.monaco-editor .codicon.codicon-symbol-event,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-event {
  color: var(--vscode-symbolIcon-eventForeground);
}

.monaco-editor .codicon.codicon-symbol-field,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-field {
  color: var(--vscode-symbolIcon-fieldForeground);
}

.monaco-editor .codicon.codicon-symbol-file,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-file {
  color: var(--vscode-symbolIcon-fileForeground);
}

.monaco-editor .codicon.codicon-symbol-folder,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-folder {
  color: var(--vscode-symbolIcon-folderForeground);
}

.monaco-editor .codicon.codicon-symbol-function,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-function {
  color: var(--vscode-symbolIcon-functionForeground);
}

.monaco-editor .codicon.codicon-symbol-interface,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-interface {
  color: var(--vscode-symbolIcon-interfaceForeground);
}

.monaco-editor .codicon.codicon-symbol-key,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-key {
  color: var(--vscode-symbolIcon-keyForeground);
}

.monaco-editor .codicon.codicon-symbol-keyword,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-keyword {
  color: var(--vscode-symbolIcon-keywordForeground);
}

.monaco-editor .codicon.codicon-symbol-module,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-module {
  color: var(--vscode-symbolIcon-moduleForeground);
}

.monaco-editor .codicon.codicon-symbol-namespace,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-namespace {
  color: var(--vscode-symbolIcon-namespaceForeground);
}

.monaco-editor .codicon.codicon-symbol-null,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-null {
  color: var(--vscode-symbolIcon-nullForeground);
}

.monaco-editor .codicon.codicon-symbol-number,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-number {
  color: var(--vscode-symbolIcon-numberForeground);
}

.monaco-editor .codicon.codicon-symbol-object,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-object {
  color: var(--vscode-symbolIcon-objectForeground);
}

.monaco-editor .codicon.codicon-symbol-operator,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-operator {
  color: var(--vscode-symbolIcon-operatorForeground);
}

.monaco-editor .codicon.codicon-symbol-package,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-package {
  color: var(--vscode-symbolIcon-packageForeground);
}

.monaco-editor .codicon.codicon-symbol-property,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-property {
  color: var(--vscode-symbolIcon-propertyForeground);
}

.monaco-editor .codicon.codicon-symbol-reference,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-reference {
  color: var(--vscode-symbolIcon-referenceForeground);
}

.monaco-editor .codicon.codicon-symbol-snippet,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-snippet {
  color: var(--vscode-symbolIcon-snippetForeground);
}

.monaco-editor .codicon.codicon-symbol-string,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-string {
  color: var(--vscode-symbolIcon-stringForeground);
}

.monaco-editor .codicon.codicon-symbol-struct,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-struct {
  color: var(--vscode-symbolIcon-structForeground);
}

.monaco-editor .codicon.codicon-symbol-text,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-text {
  color: var(--vscode-symbolIcon-textForeground);
}

.monaco-editor .codicon.codicon-symbol-type-parameter,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-type-parameter {
  color: var(--vscode-symbolIcon-typeParameterForeground);
}

div > span.n-tree-node-content > div.n-tree-node-content__prefix > span {
  color: red;
}
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-variable {
  color: chocolate;
}
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span .codicon.codicon-symbol-type-variable {
  color: red;
}
span.n-tree-node-content > div.n-tree-node-content__prefix > span .codicon-symbol-type-variable {
  color: red;
  /* 你可以把 red 替换成你想要的任何颜色值 */
}
.monaco-editor .codicon.codicon-symbol-unit,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-unit {
  color: var(--vscode-symbolIcon-unitForeground);
}

.monaco-editor .codicon.codicon-symbol-variable,
div > span.n-tree-node-content > div.n-tree-node-content__prefix > span.codicon.codicon-symbol-variable {
  color: var(--vscode-symbolIcon-variableForeground);
}

body {
  --vscode-symbolIcon-arrayForeground: #cccccc;
  --vscode-symbolIcon-booleanForeground: #cccccc;
  --vscode-symbolIcon-classForeground: #ee9d28;
  --vscode-symbolIcon-colorForeground: #cccccc;
  --vscode-symbolIcon-constantForeground: #cccccc;
  --vscode-symbolIcon-constructorForeground: #b180d7;
  --vscode-symbolIcon-enumeratorForeground: #ee9d28;
  --vscode-symbolIcon-enumeratorMemberForeground: #75beff;
  --vscode-symbolIcon-eventForeground: #ee9d28;
  --vscode-symbolIcon-fieldForeground: #75beff;
  --vscode-symbolIcon-fileForeground: #cccccc;
  --vscode-symbolIcon-folderForeground: #cccccc;
  --vscode-symbolIcon-functionForeground: #b180d7;
  --vscode-symbolIcon-interfaceForeground: #75beff;
  --vscode-symbolIcon-keyForeground: #cccccc;
  --vscode-symbolIcon-keywordForeground: #cccccc;
  --vscode-symbolIcon-methodForeground: #b180d7;
  --vscode-symbolIcon-moduleForeground: #cccccc;
  --vscode-symbolIcon-namespaceForeground: #cccccc;
  --vscode-symbolIcon-nullForeground: #cccccc;
  --vscode-symbolIcon-numberForeground: #cccccc;
  --vscode-symbolIcon-objectForeground: #cccccc;
  --vscode-symbolIcon-operatorForeground: #cccccc;
  --vscode-symbolIcon-packageForeground: #cccccc;
  --vscode-symbolIcon-propertyForeground: #cccccc;
  --vscode-symbolIcon-referenceForeground: #cccccc;
  --vscode-symbolIcon-snippetForeground: #cccccc;
  --vscode-symbolIcon-stringForeground: #cccccc;
  --vscode-symbolIcon-structForeground: #cccccc;
  --vscode-symbolIcon-textForeground: #cccccc;
  --vscode-symbolIcon-typeParameterForeground: #cccccc;
  --vscode-symbolIcon-unitForeground: #cccccc;
  --vscode-symbolIcon-variableForeground: #75beff;
}
</style>
