load('amap');//加载高德地图API
loadex("MapUtils");

//定义实施专用配置（类似java项目的properties文件）
var _xlsconf = {
    //指定将从sheet页的第N行开始导入。注意：第0行为列名行
    "startindex": "1",
    // true表示顺序导入， false表示不顺序导入（默认）
    "isOrderExtract": "true"
};

//定义实施、web端共用配置（类似存储过程的入参）
var _paramobj = {
    "_dupstrategy": "1" //重复行导入策略： 1：覆盖；2：追加；3：忽略
};

//定义数据绑定对象（类似mybatis的resultMap）
var _bind_tn_crm_dwy = {
    "code": "终端编码",
    "name": "终端名称",
    "marketing_region": "终端所属区域",
    "level": "终端级别",
    "channel_type": "渠道类型",
    "type": "终端类型",
    "manager": "终端负责人",
    "administrative_region": "行政区域",
    "contact_name": "联系人姓名",
    "telephone_number": "联系人电话",
    "detailed_addresses": "详细地址"
}

//去除对象中各属性左右的空格
item = FLY.trimObjAttrValue(IN.tn_crm_dwy);


// 报错信息
var errMsg = "";
// 校验是否通过状态
var isvalidate = false;


//检验终端编码
if (!String.isBlank(IN.tn_crm_dwy.code)) {
    var id = selectIdByCode(IN.tn_crm_dwy.code);
    if (!String.isBlank(id)) {   //如果编码已经存在
        isadd = false;
        IN.tn_crm_dwy.id = id;
    } else {
        isadd = true;
    }
} else {
    isadd = true;
    var fixStr = "ZD";//终端编码
    var seqnumber = FLY.nextval('kx_client_mana');
    if (seqnumber > 9999999999) {
        throw new ERROR("[终端]编码超过最大值了！");
    }
    IN.tn_crm_dwy.storecode = fixStr + ("0000000000" + seqnumber).substr(-10);
}

//校验-终端名称
if (String.isBlank(IN.tn_crm_dwy.name)) {
    errMsg += "终端名称不能为空；"
}

//校验-联系人姓名
if (String.isBlank(IN.tn_crm_dwy.contact_name)) {
    errMsg += "联系人姓名不能为空；"
}

//校验-详细地址
if (!String.isBlank(IN.tn_crm_dwy.detailed_addresses)) {
    var transferAddress = MAPUTIL.transferAddress(IN.tn_crm_dwy.detailed_addresses,true)
    IN.tn_crm_dwy.detailed_addresses = JSON.stringify(transferAddress);
} else {
    IN.tn_crm_dwy.detailed_addresses = null;
}

//校验-联系电话
if (!String.isBlank(IN.tn_crm_dwy.telephone_number)) {
    var phoneReg = /^1[3456789]\d{9}$/;
    if (phoneReg.test(IN.tn_crm_dwy.telephone_number)) { //联系电话正则校验
        var managerId = selectIdByTelephoneNumber(IN.tn_crm_dwy.telephone_number);
        if (!String.isBlank(id)) { //如果已存在，则根据导入策略进行操作
            if (_paramobj._dupstrategy == 1) {//覆盖  ////导入策略 1 覆盖 2 追加 3 放弃  
                IN.tn_crm_dwy.id = managerId;
                isadd = false;
            } else if (_paramobj._dupstrategy == 2) { //追加
                //联系电话作为会员信息的唯一标识，不做追加
            } else if (_paramobj._dupstrategy == 3) { //放弃
                //忽略处理
                errMsg += "联系电话已存在，放弃导入";
                isvalidate = true;
            }
        } else {
            IN.tn_crm_dwy.id = FLY.genId();
        }
    } else {
        errMsg += "联系电话格式有误；";
        isvalidate = true;
    }
} else {
    errMsg += "联系电话不能为空；";
    isvalidate = true;
}

//校验-终端级别
if (!String.isBlank(IN.tn_crm_dwy.level)) {
    if (IN.tn_crm_dwy.level == '黄金') {
        IN.tn_crm_dwy.level = '1';
    } else if (IN.tn_crm_dwy.level == '白金') {
        IN.tn_crm_dwy.level = '2';
    } else if (IN.tn_crm_dwy.level == '钻石') {
        IN.tn_crm_dwy.level = '3';
    } else {
        errMsg += "终端级别输入错误；";
        isvalidate = true;
    }
} else {
    IN.tn_crm_dwy = null;
}

//校验-行政区域
if (!String.isBlank(IN.tn_crm_dwy.administrative_region)) {
    var regionid = selectAdministrativeRegionIdByRegionName(IN.tn_crm_dwy.administrative_region);//name
    if (regionid == null || regionid == "") {
        errMsg += "行政区域不存在；";
        isvalidate = true;
    } else {
        IN.tn_crm_dwy.administrative_region = regionid;
    }
} else {
    errMsg += "行政区域不能为空！";
    IN.tn_crm_dwy.administrative_region = null
}


//校验-营销区域
if (!String.isBlank(IN.tn_crm_dwy.marketing_region)) {
    var marketing_region = selectRegionIdByRegionName(IN.tn_crm_dwy.marketing_region);
    if (marketing_region == null || marketing_region == "") {
        errMsg += "营销区域不存在；";
        isvalidate = true;
    } else {
        IN.tn_crm_dwy.marketing_region = marketing_region;
    }
} else {
    errMsg += "营销区域不能为空！";
    IN.tn_crm_dwy.marketing_region = null
}

//校验-渠道类型
if (!String.isBlank(IN.tn_crm_dwy.channel_type)) {
    var channel_type = selectChannelTypeIdByDicvalue(IN.tn_crm_dwy.channel_type);
    if (channel_type == null || channel_type == "") {
        errMsg += "渠道类型不存在；";
        isvalidate = true;
    } else {
        IN.tn_crm_dwy.channel_type = channel_type;
    }
} else {
    errMsg += "渠道类型不能为空！";
    IN.tn_crm_dwy.channel_type = null
}

//校验-终端类型
if (!String.isBlank(IN.tn_crm_dwy.type)) {
    var type = selectTypeIdByDicvalue(IN.tn_crm_dwy.type);
    if (type == null || type == "") {
        errMsg += "终端类型不存在；";
        isvalidate = true;
    } else {
        IN.tn_crm_dwy.type = type;
    }
} else {
    errMsg += "终端类型不能为空！";
    IN.tn_crm_dwy.type = null
}

//校验-终端负责人
if (!String.isBlank(IN.tn_crm_dwy.manager)) {
    var manager = selectManagerIdByOrgname(IN.tn_crm_dwy.manager);
    if (manager == null || manager == "") {
        errMsg += "终端负责人不存在；";
        isvalidate = true;
    } else {
        IN.tn_crm_dwy.manager = manager;
    }
} else {
    errMsg += "终端负责人不能为空！";
    IN.tn_crm_dwy.manager = null
}

// 判断校验是否通过
if (isvalidate) {
    throw new ERROR(errMsg);
}

//***********组装操作对象 */
// 新建一个实体对象
var tn_crm_dwy = BO.new("tn_crm_dwy");
tn_crm_dwy.id = IN.tn_crm_dwy.id;
tn_crm_dwy.code = IN.tn_crm_dwy.code;
tn_crm_dwy.name = IN.tn_crm_dwy.name;
tn_crm_dwy.marketing_region = IN.tn_crm_dwy.marketing_region;
tn_crm_dwy.type = IN.tn_crm_dwy.type;
tn_crm_dwy.contact_name = IN.tn_crm_dwy.contact_name;
tn_crm_dwy.telephone_number = IN.tn_crm_dwy.telephone_number;
tn_crm_dwy.detailed_addresses = IN.tn_crm_dwy.detailed_addresses;
tn_crm_dwy.administrative_region = IN.tn_crm_dwy.administrative_region;
tn_crm_dwy.manager = IN.tn_crm_dwy.manager;
// tn_crm_dwy.storeimg = IN.tn_crm_dwy.storeimg;
tn_crm_dwy.channel_type = IN.tn_crm_dwy.channel_type;
tn_crm_dwy.level = IN.tn_crm_dwy.level;

if (isadd) {
    tn_crm_dwy.create_time = NOW.time();
    DB.insert(move_nullkey(tn_crm_dwy));
} else {
    tn_crm_dwy.update_time = NOW.time();
    // tn_crm_dwy.platstatus=1;
    DB.update(move_nullkey(tn_crm_dwy));
}


// 根据终端编码查询对应终端id
function selectIdByCode(code) {
    var data = select id
    from tn_crm_dwy
    where code ={code}
    NORULE;
    if (data.length > 0) {
        return data[0].id;
    } else {
        return null;
    }
}

// 根据渠道类型名称查询对应渠道类型id
function selectChannelTypeIdByDicvalue(dicvalue) {
    var data = select dictionaryid
    from pl_dictionary
    where status = 1
    and dicvalue = {dicvalue}
    NORULE;
    if (data.length > 0) {
        return data[0].dictionaryid;
    } else {
        return null;
    }
}

// 根据终端负责人名称查询对应终端负责人id
function selectManagerIdByOrgname(orgname) {

    var data = select orgstructid
    from pl_orgstruct
    where status = 1
    and orgname = {orgname}
    NORULE;
    if (data.length > 0) {
        return data[0].orgstructid;
    } else {
        return null;
    }
}

// 根据行政区域名称查询对应行政区域id
function selectAdministrativeRegionIdByRegionName(regionname) {
    var data = select regionid
    from pl_region
    where status = 1
    and regionname = {regionname}
    NORULE;
    if (data.length > 0) {
        return data[0].regionid;
    } else {
        return null;
    }
}

// 根据终端类型名称查询对应终端类型id
function selectTypeIdByDicvalue(dicvalue) {
    var data = select dictionaryid
    from pl_dictionary
    where status = 1
    and dicvalue = { dicvalue}
    NORULE;
    if (data.length > 0) {
        return data[0].dictionaryid;
    } else {
        return null;
    }
}

// 根据营销区域名称获取营销区域id
function selectRegionIdByRegionName(orgname) {
    var data = select po.orgstructid
    from pl_orgstruct as po
    where status = 1
    and orgname = {orgname}
    NORULE;
    if (data.length > 0) {
        return data[0].orgstructid;
    } else {
        return null;
    }
}

// 根据联系电话获取会员id
function selectIdByTelephoneNumber(telephone_number) {
    var data = select id
    from tn_crm_dwy
    where telephone_number = { telephone_number } NORULE;
    if (data.length > 0) {
        return data[0].id;
    } else {
        return null;
    }
}


// 对象属性判空
function move_nullkey(obj) {
    for (var key in obj) {
        if (obj[key] == null) {
            delete obj[key];
        }
    }
    return obj;
}